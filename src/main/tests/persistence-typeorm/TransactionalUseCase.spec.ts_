import { assert } from 'chai'
import { AppContainer } from '../../../../lib/core/di/AppContainer'
import { ParentTransactionalUseCaseTkn, TestSpecialistAccountRepoTkn, TestSpecialistRepoTkn } from '../../test-tokens'
import { RepositoryFactoryTkn } from '../../../../lib/persistence/luxe-persistence-tokens'
import { PersistenceConnectionRegistry } from '../../../../lib/persistence/PersistenceConnectionRegistry'
import { PersistenceContextMeta } from '../../../../lib/persistence/PersistenceContextMeta'
import AssertionError = Chai.AssertionError

describe('typeorm transactional use case', function () {
  it('should begin and rollback transactional use case', async function () {
    const specRepo = AppContainer.get(RepositoryFactoryTkn).get(TestSpecialistAccountRepoTkn)
    const oldCount = await specRepo.count()

    const useCase = AppContainer.get(ParentTransactionalUseCaseTkn)
    try {
      await useCase.run(true)
    } catch (err) {
      // Transaction was rollback'd
    }

    assert.equal(await specRepo.count(), oldCount)
  })

  it('should commit nested transactional use case', async function () {
    const repoFactory = AppContainer.get(RepositoryFactoryTkn)
    const nonTransSpecRepo = repoFactory.get(TestSpecialistRepoTkn)
    const oldCount = await nonTransSpecRepo.count()

    const connection = PersistenceConnectionRegistry.get('test')
    if (!connection.transaction) {
      throw new Error('`connection.transaction` should be defined')
    }

    await connection.transaction(async em => {
      const useCase = AppContainer.get(ParentTransactionalUseCaseTkn)
      Reflect.defineMetadata(PersistenceContextMeta.TRANSACTIONAL_EM, em, useCase)
      await useCase.run()
      assert.equal(await repoFactory.get(TestSpecialistRepoTkn, em).count(), oldCount + 2)

      throw new Error() // Exit from transaction
    })

    assert.equal(await nonTransSpecRepo.count(), oldCount)
  })

  // it('transational use case child should rollback', async function () {
  //   const repoFactory = AppContainer.get(RepositoryFactoryTkn)
  //   const nonTransSpecRepo = repoFactory.get(BaseTestSpecialistRepositoryTkn)
  //   const oldCount = await nonTransSpecRepo.count()
  //
  //   const trMgr = AppContainer.get(TransactionManagerTkn)
  //   const em = await trMgr.begin()
  //   const useCase = AppContainer.get(TransactionParentUseCaseTkn).configure(em)
  //   await useCase.run(false, true)
  //
  //   expect(await repoFactory.get(BaseTestSpecialistRepositoryTkn, em).count())
  //     .equals(oldCount + 1)
  //
  //   await trMgr.rollback(em)
  //
  //   expect(await nonTransSpecRepo.count()).equals(oldCount)
  // })
})
